mod prove;

use std::env;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::POLYCASH_ZK_GUEST_ID;
use contracts;
use contracts::msgpack::decode_pending_state;
use std::process::ExitCode;
use contracts::read_contract::read_contract;
use contracts::vm::ZkInfo;
use crate::prove::prove;

fn main() -> ExitCode {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let contract_contents = read_contract();
    let args: Vec<String> = env::args().collect();
    let contract_hash  = &args[2];
    let gas_limit: f64 = args[3].parse().unwrap();
    let sender: Vec<u8> = args[4].clone().into();
    let pending_state = decode_pending_state();
    let run_details = contracts::vm::VmRunDetails {
        contract_contents: std::string::String::from(contract_contents),
        contract_hash: contract_hash.to_owned(),
        gas_limit,
        sender,
        pending_state
    };

    let receipt = prove(run_details);
    let output: ZkInfo = receipt.journal.decode().unwrap();
    
    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(POLYCASH_ZK_GUEST_ID)
        .unwrap();

    ExitCode::from(output.exit_code as u8)
}
