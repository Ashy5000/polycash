// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    POLYCASH_ZK_GUEST_ELF, POLYCASH_ZK_GUEST_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use contracts;
use contracts::msgpack::PendingState;
use contracts::vm::ZkInfo;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let contract_contents = String::from("InitBfr 0x00000000 0x00000000");
    let contract_hash = String::from("79d58ca0301f1654bae45ec6c6a8ed19af3be63887e9c568a39864590318ca5b");
    let gas_limit = 10000f64;
    let sender: Vec<u8> = Vec::new();
    let pending_state = PendingState::new();
    let run_details = contracts::vm::VmRunDetails {
        contract_contents,
        contract_hash,
        gas_limit,
        sender,
        pending_state
    };
    let env = ExecutorEnv::builder()
        .write(&run_details)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, POLYCASH_ZK_GUEST_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // Get output from journal

    let output: ZkInfo = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(POLYCASH_ZK_GUEST_ID)
        .unwrap();
}
