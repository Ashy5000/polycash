mod prove;
mod lazy_vector;

use std::env;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::POLYCASH_ZK_GUEST_ID;
use contracts;
use contracts::blockutil::{BlockUtilInterface, NodeBlockUtilInterface};
use contracts::read_contract::read_contract;
use contracts::merkle::merklize;
use crate::lazy_vector::HostVector;
use crate::prove::prove;
use rustc_hash::FxHashMap;

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
    
    let contracts_file = read_contract();
    let contract_contents_str = contracts_file.split("%").collect::<Vec<&str>>(); // % marks separation between contracts
    let mut contract_contents = Vec::new();
    for contract in contract_contents_str {
        contract_contents.push(std::string::String::from(contract));
    }
    let args: Vec<String> = env::args().collect();
    let contract_hashes_str  = args[2].split("%").collect::<Vec<&str>>();
    let mut contract_hashes = Vec::new();
    for hash in contract_hashes_str {
        contract_hashes.push(std::string::String::from(hash));
    }
    let gas_limit_f64: f64 = args[3].parse().unwrap();
    let gas_limit = gas_limit_f64 as i64;
    let sender: Vec<u8> = args[4].clone().into();
  
    // Initialize merkle tree
    let mut data: FxHashMap<String, Vec<u8>> = FxHashMap::default();
    // TODO: Load & deserialize merkle tree from a file
    data.insert(String::from("0000000000000000"), vec![0, 0, 0, 0, 0, 0, 0, 1]);
    let tree = merklize(data);
    let lazy_len = tree.len();
    let host_vector = HostVector::new(tree);
    
    // Create node blockutil for data fetching
    let node_blockutil = NodeBlockUtilInterface::new();
    
    // Fetch data from node
    let blockchain_len = node_blockutil.get_blockchain_len();
    
    let run_details = contracts::vm::VmRunDetails {
        contract_contents,
        contract_hash: contract_hashes,
        gas_limit,
        sender,
        lazy_len,
        blockchain_len
    };

    let receipt = prove(run_details, host_vector);
    
    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(POLYCASH_ZK_GUEST_ID)
        .unwrap();
}
